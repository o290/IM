// package ctype
//
// import (
//
//	"database/sql/driver"
//	"encoding/json"
//	"time"
//
// )
//
// type MsgType int8
//
// const (
//
//	TextMsgType MsgType = iota + 1
//	ImgMsgType
//	VideoMsgType
//	FileMsgType
//	VoiceMsgType
//	VoiceCallMsgType
//	VideoCallType
//	WithdrawMsgType
//	ReplyMsgType
//	QuoteMsgType
//	AtMsgType
//	TipMsgType
//
// )
//
//	type Msg struct {
//	   Type         MsgType       `json:"type"`
//	   TextMsg      *TextMsg      `json:"textMsg,omitempty"`
//	   ImgMsg       *ImgMsg       `json:"imgMsg,omitempty"`
//	   VideoMsg     *VideoMsg     `json:"videoMsg,omitempty"`
//	   FileMsg      *FileMsg      `json:"fileMsg,omitempty"`
//	   VoiceMsg     *VoiceMsg     `json:"voiceMsg,omitempty"`
//	   VoiceCallMsg *VoiceCallMsg `json:"voiceCallMsg,omitempty"`
//	   VideoCall    *VideoMsg     `json:"videoCall,omitempty"`
//	   WithdrawMsg  *WithdrawMsg  `json:"withdrawMsg,omitempty"`
//	   ReplyMsg     *ReplyMsg     `json:"replyMsg,omitempty"`
//	   QuoteMsg     *QuoteMsg     `json:"quoteMsg,omitempty"`
//	   AtMsg        *AtMsg        `json:"atMsg,omitempty"`  //@消息，群聊
//	   TipMsg       *TipMsg       `json:"tipMsg,omitempty"` //提示消息，一般是不入库的
//	}
//
//	func (m Msg) MsgPreview() string {
//	   switch m.Type {
//	   case 1:
//	      return m.TextMsg.Content
//	   case 2:
//	      return "[图片消息] - " + m.ImgMsg.Title
//	   case 3:
//	      return "[视频消息] - " + m.VideoMsg.Title
//	   case 4:
//	      return "[文件消息] - " + m.FileMsg.Title
//	   case 5:
//	      return "[语音消息]"
//	   case 6:
//	      return "[语言通话]"
//	   case 7:
//	      return "[视频通话]"
//	   case 8:
//	      return "[撤回消息] - " + m.WithdrawMsg.Content
//	   case 9:
//	      return "[回复消息] - " + m.ReplyMsg.Content
//	   case 10:
//	      return "[引用消息] - " + m.QuoteMsg.Content
//	   case 11:
//	      return "[@消息] - " + m.AtMsg.Content
//	   }
//	   return "[未知消息]"
//	}
//
// // Scan取出来的数据
//
//	func (m *Msg) Scan(val interface{}) error {
//	   err := json.Unmarshal(val.([]byte), m)
//	   if err != nil {
//	      return err
//	   }
//	   if m.Type == WithdrawMsgType {
//	      //如果这个消息是撤回消息,那就不要把原消息带出
//	      if m.WithdrawMsg != nil {
//	         m.WithdrawMsg.OriginMsg = nil
//	      }
//	   }
//	   return nil
//	}
//
// // value 入库数据
//
//	func (m Msg) Value() (driver.Value, error) {
//	   b, err := json.Marshal(m)
//	   return string(b), err
//	}
//
//	type TextMsg struct {
//	   Content string `json:"content"`
//	}
//
//	type ImgMsg struct {
//	   Title string `json:"title"`
//	   Src   string `json:"src"`
//	}
//
//	type VideoMsg struct {
//	   Title string `json:"title"`
//	   Src   string `json:"src"`
//	   Time  int    `json:"time"` //时长单位秒
//	}
//
//	type FileMsg struct {
//	   Title string `json:"title"`
//	   Src   string `json:"src"`
//	   Size  int64  `json:"size"`
//	   Type  string `json:"type"`
//	}
//
//	type VoiceMsg struct {
//	   Title string `json:"title"`
//	   Src   string `json:"src"`
//	}
//
//	type VoiceCallMsg struct {
//	   StartTime time.Time `json:"startTime"`
//	   EndTime   time.Time `json:"endTime"`
//	   EndReason time.Time `json:"endReason"` //0：发起方挂断1：接收方挂断2：网络原因挂断3：未打通
//	}
//
//	type VideoCall struct {
//	   StartTime time.Time `json:"startTime"`
//	   EndTime   time.Time `json:"endTime"`
//	   EndReason time.Time `json:"endReason"` //0：发起方挂断1：接收方挂断2：网络原因挂断3：未打通
//	}
//
//	type WithdrawMsg struct {
//	   Content   string `json:"content"`             //提示词
//	   MsgID     uint   `json:"msgID"`               // 需要撤回的消息id 入参必填
//	   OriginMsg *Msg   `json:"originMsg,omitempty"` //原消息,转出去但不显示
//	}
//
//	type ReplyMsg struct {
//	   MsgID         uint      `json:"msgID"`   //原消息id
//	   Content       string    `json:"content"` //回复的内容
//	   Msg           *Msg      `json:"msg,omitempty"`
//	   UserID        uint      `json:"userID"`        //被回复人的用户id
//	   UserNickName  string    `json:"userNickName"`  // 被回复人的昵称
//	   OriginMsgDate time.Time `json:"originMsgDate"` //原消息的时间
//	}
//
//	type QuoteMsg struct {
//	   MsgID         uint      `json:"msgID"`   //原消息id
//	   Content       string    `json:"content"` //回复的内容
//	   Msg           *Msg      `json:"msg"`
//	   UserID        uint      `json:"userID"`        //被回复人的用户id
//	   UserNickName  string    `json:"userNickName"`  // 被回复人的昵称
//	   OriginMsgDate time.Time `json:"originMsgDate"` //原消息的时间
//	}
//
//	type AtMsg struct {
//	   UserID  uint   `json:"userID"`
//	   Content string `json:"content"` //回复的内容
//	   Msg     *Msg   `json:"msg"`
//	}
//
//	type TipMsg struct {
//	   Status  string `json:"status"`  //error success warning info
//	   Content string `json:"content"` //回复的内容
//	}
package ctype

import (
	"database/sql/driver"
	"encoding/json"
	"time"
)

type MsgType int8

const (
	TextMsgType MsgType = iota + 1
	ImgMsgType
	VideoMsgType
	FileMsgType
	VoiceMsgType
	VoiceCallMsgType
	VideoCallType
	WithdrawMsgType
	ReplyMsgType
	QuoteMsgType
	AtMsgType
	TipMsgType
	AckMsgType
	ReadMsgType // 已读消息
)

type Msg struct {
	Type         MsgType       `json:"type"`
	TextMsg      *TextMsg      `json:"textMsg,omitempty"`
	ImgMsg       *ImgMsg       `json:"imgMsg,omitempty"`
	VideoMsg     *VideoMsg     `json:"videoMsg,omitempty"`
	FileMsg      *FileMsg      `json:"fileMsg,omitempty"`
	VoiceMsg     *VoiceMsg     `json:"voiceMsg,omitempty"`
	VoiceCallMsg *VoiceCallMsg `json:"voiceCallMsg,omitempty"`
	VideoCall    *VideoMsg     `json:"videoCall,omitempty"`
	WithdrawMsg  *WithdrawMsg  `json:"withdrawMsg,omitempty"`
	ReplyMsg     *ReplyMsg     `json:"replyMsg,omitempty"`
	QuoteMsg     *QuoteMsg     `json:"quoteMsg,omitempty"`
	AtMsg        *AtMsg        `json:"atMsg,omitempty"`  //@消息，群聊
	TipMsg       *TipMsg       `json:"tipMsg,omitempty"` //提示消息，一般是不入库的
	AckMsg       *AckMsg       `json:"ackMsg,omitempty"` //确认消息，一般是不入库的
	ReadMsg      *ReadMsg      `json:"readMsg,omitempty"`
}

func (m Msg) MsgPreview() string {
	switch m.Type {
	case 1:
		return m.TextMsg.Content
	case 2:
		return "[图片消息] - " + m.ImgMsg.Title
	case 3:
		return "[视频消息] - " + m.VideoMsg.Title
	case 4:
		return "[文件消息] - " + m.FileMsg.Title
	case 5:
		return "[语音消息]"
	case 6:
		return "[语言通话]"
	case 7:
		return "[视频通话]"
	case 8:
		return "[撤回消息] - " + m.WithdrawMsg.Content
	case 9:
		return "[回复消息] - " + m.ReplyMsg.Content
	case 10:
		return "[引用消息] - " + m.QuoteMsg.Content
	case 11:
		return "[@消息] - " + m.AtMsg.Content
		// case 12:
		//     return "[确认消息] - " + m.AckMsg.Content
	}
	return "[未知消息]"
}

// Scan取出来的数据
func (m *Msg) Scan(val interface{}) error {
	err := json.Unmarshal(val.([]byte), m)
	if err != nil {
		return err
	}
	if m.Type == WithdrawMsgType {
		//如果这个消息是撤回消息,那就不要把原消息带出
		if m.WithdrawMsg != nil {
			m.WithdrawMsg.OriginMsg = nil
		}
	}
	return nil
}

// value 入库数据
func (m Msg) Value() (driver.Value, error) {
	b, err := json.Marshal(m)
	return string(b), err
}

type TextMsg struct {
	Content string `json:"content"`
}
type ImgMsg struct {
	Title string `json:"title"`
	Src   string `json:"src"`
}
type VideoMsg struct {
	Title string `json:"title"`
	Src   string `json:"src"`
	Time  int    `json:"time"` //时长单位秒
}
type FileMsg struct {
	Title string `json:"title"`
	Src   string `json:"src"`
	Size  int64  `json:"size"`
	Type  string `json:"type"`
}
type VoiceMsg struct {
	Title string `json:"title"`
	Src   string `json:"src"`
}
type VoiceCallMsg struct {
	StartTime time.Time `json:"startTime"`
	EndTime   time.Time `json:"endTime"`
	EndReason time.Time `json:"endReason"` //0：发起方挂断1：接收方挂断2：网络原因挂断3：未打通
}
type VideoCall struct {
	StartTime time.Time `json:"startTime"`
	EndTime   time.Time `json:"endTime"`
	EndReason time.Time `json:"endReason"` //0：发起方挂断1：接收方挂断2：网络原因挂断3：未打通
}
type WithdrawMsg struct {
	Content   string `json:"content"`             //提示词
	MsgID     uint   `json:"msgID"`               // 需要撤回的消息id 入参必填
	OriginMsg *Msg   `json:"originMsg,omitempty"` //原消息,转出去但不显示
}
type ReplyMsg struct {
	MsgID         uint      `json:"msgID"`   //原消息id
	Content       string    `json:"content"` //回复的内容
	Msg           *Msg      `json:"msg,omitempty"`
	UserID        uint      `json:"userID"`        //被回复人的用户id
	UserNickName  string    `json:"userNickName"`  // 被回复人的昵称
	OriginMsgDate time.Time `json:"originMsgDate"` //原消息的时间
}
type QuoteMsg struct {
	MsgID         uint      `json:"msgID"`   //原消息id
	Content       string    `json:"content"` //回复的内容
	Msg           *Msg      `json:"msg"`
	UserID        uint      `json:"userID"`        //被回复人的用户id
	UserNickName  string    `json:"userNickName"`  // 被回复人的昵称
	OriginMsgDate time.Time `json:"originMsgDate"` //原消息的时间
}
type AtMsg struct {
	UserID  uint   `json:"userID"`
	Content string `json:"content"` //回复的内容
	Msg     *Msg   `json:"msg"`
}
type TipMsg struct {
	Status  string `json:"status"`  //error success warning info
	Content string `json:"content"` //回复的内容
}
type AckMsg struct {
	MsgID  uint   `json:"msgID"`
	Status int32  `json:"status"` //0:发送中 1:已发送 2:已接收 3:已读
	ErrMsg string `json:"errMsg"` //错误信息
}

// ReadMsg 已读消息结构体
type ReadMsg struct {
	MsgID uint `json:"msgID"`
}
